// src/app/admin/blog/new/page.jsx
'use client'
import { useState } from 'react'
import { 
  Card, 
  CardBody, 
  CardHeader, 
  Button, 
  Input, 
  Textarea,
  Select,
  SelectItem,
  Switch,
  Chip,
  Divider
} from '@nextui-org/react'
import { 
  Save, 
  Eye, 
  ArrowLeft, 
  Upload, 
  Plus, 
  X,
  FileText,
  Calendar,
  User,
  Tag
} from 'lucide-react'
import Link from 'next/link'
import { motion } from 'framer-motion'
import { blogCategories } from '@/lib/blog'
import TipTapEditorWrapper from '@/components/admin/TipTapEditorWrapper'

export default function NewBlogPostPage() {
  const [formData, setFormData] = useState({
    title: '',
    slug: '',
    excerpt: '',
    content: '',
    category: '',
    author: '',
    status: 'draft',
    featured: false,
    tags: [],
    featuredImage: '',
    publishedAt: new Date().toISOString().split('T')[0]
  })
  
  const [newTag, setNewTag] = useState('')
  const [isSaving, setIsSaving] = useState(false)

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))

    // Auto-generate slug from title
    if (field === 'title') {
      const slug = value
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/(^-|-$)/g, '')
      setFormData(prev => ({
        ...prev,
        slug: slug
      }))
    }
  }

  const addTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, newTag.trim()]
      }))
      setNewTag('')
    }
  }

  const removeTag = (tagToRemove) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }))
  }

  const handleSave = async (status = 'draft') => {
    setIsSaving(true)
    
    // Extract plain text from HTML for read time calculation
    const plainText = formData.content.replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ').trim()
    
    const postData = {
      ...formData,
      status,
      updatedAt: new Date().toISOString().split('T')[0],
      id: Date.now(), // In real app, this would be generated by backend
      views: 0,
      readTime: Math.ceil(plainText.split(' ').length / 200) // Rough estimate: 200 words per minute
    }

    // Simulate API call
    setTimeout(() => {
      console.log('Saving post:', postData)
      setIsSaving(false)
      // In real app, redirect to blog admin or show success message
    }, 1000)
  }

  const handlePreview = () => {
    // Open preview in new tab
    const previewData = encodeURIComponent(JSON.stringify(formData))
    window.open(`/admin/blog/preview?data=${previewData}`, '_blank')
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col space-y-4">
        <div className="flex justify-between items-center">
          <div className="flex items-center gap-4">
            <Link href="/admin/blog">
              <Button variant="flat" startContent={<ArrowLeft className="w-4 h-4" />}>
                Back to Blog
              </Button>
            </Link>
            <div>
              <h1 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
                <FileText className="w-6 h-6 text-purple-600" />
                Create New Post
              </h1>
              <p className="text-gray-600 mt-1">Write and publish a new blog post</p>
            </div>
          </div>
          <div className="flex gap-2">
            <Button
              variant="flat"
              onPress={handlePreview}
              startContent={<Eye className="w-4 h-4" />}
            >
              Preview
            </Button>
            <Button
              variant="flat"
              color="primary"
              onPress={() => handleSave('draft')}
              isLoading={isSaving}
            >
              Save Draft
            </Button>
            <Button
              color="primary"
              onPress={() => handleSave('published')}
              isLoading={isSaving}
              startContent={<Save className="w-4 h-4" />}
            >
              Publish
            </Button>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main Content */}
        <div className="lg:col-span-2 space-y-6">
          {/* Basic Information */}
          <Card>
            <CardHeader>
              <h3 className="text-lg font-semibold">Post Content</h3>
            </CardHeader>
            <CardBody className="space-y-6">
              <Input
                label="Title"
                placeholder="Enter post title..."
                value={formData.title}
                onChange={(e) => handleInputChange('title', e.target.value)}
                isRequired
              />

              <Input
                label="Slug"
                placeholder="post-url-slug"
                value={formData.slug}
                onChange={(e) => handleInputChange('slug', e.target.value)}
                description="URL-friendly version of the title"
              />

              <Textarea
                label="Excerpt"
                placeholder="Brief description of the post..."
                value={formData.excerpt}
                onChange={(e) => handleInputChange('excerpt', e.target.value)}
                minRows={3}
                description="This will appear in post listings and search results"
              />

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Content *
                </label>
                <TipTapEditorWrapper
                  content={formData.content}
                  onChange={(html) => handleInputChange('content', html)}
                  placeholder="Write your blog post content here..."
                />
                <p className="text-xs text-gray-500 mt-2">
                  Use the rich text editor to format your content with headings, lists, links, images, and more.
                </p>
              </div>
            </CardBody>
          </Card>

          {/* Featured Image */}
          <Card>
            <CardHeader>
              <h3 className="text-lg font-semibold">Featured Image</h3>
            </CardHeader>
            <CardBody>
              <div className="flex flex-col gap-4">
                <Input
                  label="Image URL"
                  placeholder="https://example.com/image.jpg"
                  value={formData.featuredImage}
                  onChange={(e) => handleInputChange('featuredImage', e.target.value)}
                />
                <Button
                  variant="flat"
                  startContent={<Upload className="w-4 h-4" />}
                  className="w-fit"
                >
                  Upload Image
                </Button>
                {formData.featuredImage && (
                  <div className="aspect-video bg-gray-100 rounded-lg border-2 border-dashed border-gray-300 flex items-center justify-center">
                    <span className="text-gray-500">Image Preview</span>
                  </div>
                )}
              </div>
            </CardBody>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Publishing Options */}
          <Card>
            <CardHeader>
              <h3 className="text-lg font-semibold">Publishing</h3>
            </CardHeader>
            <CardBody className="space-y-4">
              <Select
                label="Status"
                selectedKeys={[formData.status]}
                onSelectionChange={(keys) => handleInputChange('status', Array.from(keys)[0])}
              >
                <SelectItem key="draft">Draft</SelectItem>
                <SelectItem key="published">Published</SelectItem>
                <SelectItem key="archived">Archived</SelectItem>
              </Select>

              <Input
                label="Publish Date"
                type="date"
                value={formData.publishedAt}
                onChange={(e) => handleInputChange('publishedAt', e.target.value)}
              />

              <div className="flex items-center justify-between">
                <span className="text-sm font-medium">Featured Post</span>
                <Switch
                  isSelected={formData.featured}
                  onValueChange={(value) => handleInputChange('featured', value)}
                />
              </div>
            </CardBody>
          </Card>

          {/* Post Details */}
          <Card>
            <CardHeader>
              <h3 className="text-lg font-semibold">Post Details</h3>
            </CardHeader>
            <CardBody className="space-y-4">
              <Select
                label="Category"
                placeholder="Select category"
                selectedKeys={formData.category ? [formData.category] : []}
                onSelectionChange={(keys) => handleInputChange('category', Array.from(keys)[0])}
                isRequired
              >
                {blogCategories.map((category) => (
                  <SelectItem key={category.id} value={category.id}>
                    {category.name}
                  </SelectItem>
                ))}
              </Select>

              <Input
                label="Author"
                placeholder="Author name"
                value={formData.author}
                onChange={(e) => handleInputChange('author', e.target.value)}
                startContent={<User className="w-4 h-4 text-gray-400" />}
                isRequired
              />

              <Divider />

              <div>
                <label className="text-sm font-medium mb-2 block">Tags</label>
                <div className="flex gap-2 mb-3">
                  <Input
                    placeholder="Add tag"
                    value={newTag}
                    onChange={(e) => setNewTag(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && addTag()}
                    size="sm"
                  />
                  <Button
                    size="sm"
                    color="primary"
                    variant="flat"
                    onPress={addTag}
                    isIconOnly
                  >
                    <Plus className="w-4 h-4" />
                  </Button>
                </div>
                <div className="flex flex-wrap gap-2">
                  {formData.tags.map((tag) => (
                    <Chip
                      key={tag}
                      size="sm"
                      variant="flat"
                      color="secondary"
                      onClose={() => removeTag(tag)}
                    >
                      {tag}
                    </Chip>
                  ))}
                </div>
              </div>
            </CardBody>
          </Card>

          {/* SEO */}
          <Card>
            <CardHeader>
              <h3 className="text-lg font-semibold">SEO Settings</h3>
            </CardHeader>
            <CardBody className="space-y-4">
              <Input
                label="Meta Title"
                placeholder="SEO title"
                description="Recommended: 50-60 characters"
              />
              <Textarea
                label="Meta Description"
                placeholder="SEO description"
                minRows={3}
                description="Recommended: 150-160 characters"
              />
            </CardBody>
          </Card>
        </div>
      </div>
    </div>
  )
}
